name: ⚙️🚀

on:
  pull_request:
  workflow_dispatch:
  push:
    branches: [main]
    tags: ["*"]

concurrency:
  group: ci-cd-${{ github.ref }}
  cancel-in-progress: true

jobs:
  code-quality:
    name: 🦀 Code Quality
    runs-on: ubuntu-latest
    steps:
      - name: 🛎️ Checkout
        uses: actions/checkout@v3.5.1

      - name: ♻️ Manage Cache
        uses: actions/cache@v3.3.1
        with:
          path: |
            ~/.cargo/
            target/
          key: cargo-${{ runner.os }}-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            cargo-${{ runner.os }}-${{ hashFiles('**/Cargo.lock') }}
            cargo-${{ runner.os }}-

      - name: 🎨 Check Formatting
        run: cargo fmt --check --all

      - name: 📎 Check Linting
        run: cargo clippy --locked --all-targets --all-features -- -D warnings

  build-artifacts:
    name: ⚙️ Build (${{ matrix.artifact-name }})
    needs: [code-quality]
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            artifact-name: chara-linux-x86_64
            cargo-target: x86_64-unknown-linux-gnu
          - os: ubuntu-latest
            artifact-name: chara-linux-aarch64
            cargo-target: aarch64-unknown-linux-gnu
            linker: gcc-aarch64-linux-gnu
          - os: macos-latest
            artifact-name: chara-macos-x86_64
            cargo-target: x86_64-apple-darwin
          - os: macos-latest
            artifact-name: chara-macos-aarch64
            cargo-target: aarch64-apple-darwin
          - os: windows-latest
            artifact-name: chara-windows-x86_64
            cargo-target: x86_64-pc-windows-gnu

    steps:
      - name: 🛎️ Checkout
        uses: actions/checkout@v3.5.1

      - name: 🔗 Install Linker packages
        if: matrix.linker != ''
        run: |
          sudo apt-get -y update
          sudo apt-get -y install ${{ matrix.linker }}

      - name: 🎯 Add Rustup Target
        run: rustup target add ${{ matrix.cargo-target }}

      - name: ♻️ Manage Build Cache
        uses: actions/cache@v3.3.1
        with:
          path: |
            ~/.cargo/
            target/
          key: cargo-${{ matrix.artifact-name }}-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            cargo-${{ matrix.artifact-name }}-${{ hashFiles('**/Cargo.lock') }}
            cargo-${{ matrix.artifact-name }}-

      - name: 🛠️ Build Binary
        run: cargo build --locked --release --target ${{ matrix.cargo-target }}

      - name: 🧪 Run Tests
        run: cargo test --locked --all-targets --all-features

      - name: 📁 Setup Archive + Extension
        shell: bash
        run: |
          mkdir -p staging
          if [ "${{ matrix.os }}" = "windows-latest" ]; then
            cp "target/${{ matrix.cargo-target }}/release/chara.exe" staging/
            cd staging
            7z a ../${{ matrix.artifact-name }}.zip *
          else
            cp "target/${{ matrix.cargo-target }}/release/chara" staging/
            cd staging
            zip ../${{ matrix.artifact-name }}.zip *
          fi

      - name: ⬆️ Upload Binary Artifact
        uses: actions/upload-artifact@v3.1.2
        with:
          name: ${{ matrix.artifact-name }}
          path: ${{ matrix.artifact-name }}.zip
          retention-days: 5

  release:
    name: 🚀 Create Release
    if: github.ref_type	== 'tag'
    needs: [build-artifacts]
    runs-on: ubuntu-latest

    steps:
      - name: ⬇️ Download All Binary Artifacts
        uses: actions/download-artifact@v3.0.2

      - name: 🗃️Create Release
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          generate_release_notes: true
          files: chara-*/*.zip
