name: ‚öôÔ∏èüöÄ

on:
  push:
    tags: ["*"]

env:
  WIN_ARTIFACT: chara-windows-x86_64
  LINUX_ARTIFACT: chara-linux-x86_64
  LINUX_AARCH_ARTIFACT: chara-linux-aarch64
  MACOS_ARTIFACT: chara-macos-x86_64
  MACOS_AARCH_ARTIFACT: chara-macos-aarch64

jobs:
  build-artifacts:
    strategy:
      matrix:
        include:
          - os: windows-latest
            artifact-name: ${{ env.WIN_ARTIFACT }}
            cargo-target: x86_64-pc-windows-msvc
          - os: ubuntu-latest
            artifact-name: ${{ env.LINUX_ARTIFACT }}
            cargo-target: x86_64-unknown-linux-gnu
          - os: ubuntu-latest
            artifact-name: ${{ env.LINUX_AARCH_ARTIFACT }}
            cargo-target: aarch64-unknown-linux-gnu
            linker: gcc-aarch64-linux-gnu
          - os: macos-latest
            artifact-name: ${{ env.MACOS_ARTIFACT }}
            cargo-target: x86_64-apple-darwin
          - os: macos-latest
            artifact-name: ${{ env.MACOS_AARCH_ARTIFACT }}
            cargo-target: aarch64-apple-darwin

    name: ‚öôÔ∏è Build (${{ matrix.artifact-name }})
    runs-on: ${{ matrix.os }}
    steps:
      - name: üõéÔ∏è Checkout
        uses: actions/checkout@v3

      - name: ‚ú® Install Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: nightly
          target: ${{ matrix.cargo-target }}
          override: true
          profile: minimal

      - name: üîó Install Linker packages
        if: ${{ matrix.linker != '' }}
        run: |
          sudo apt update
          sudo apt install ${{ matrix.linker }}

      - name: üõ†Ô∏è Build Binary
        run: cargo build --verbose --locked --release --target ${{ matrix.cargo-target }}

      - name: üìÅ Setup Archive + Extension
        shell: bash
        run: |
          mkdir -p staging
          if [ "${{ matrix.os }}" = "windows-latest" ]; then
            cp "target/${{ matrix.cargo-target }}/release/chara.exe" staging/
            cd staging
            7z a ../release.zip *
          else
            cp "target/${{ matrix.cargo-target }}/release/chara" staging/
            cd staging
            zip ../release.zip *
          fi

      - name: ‚¨ÜÔ∏è Upload Binary Artifact
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.artifact-name }}
          path: release.zip
          retention-days: 5

  create-release:
    needs: ["build-artifacts"]
    name: üöÄ Create Release
    runs-on: ubuntu-latest

    steps:
      - name: ‚¨áÔ∏è Download All Binary Artifacts
        uses: actions/download-artifact@v3

      - name: üóÉÔ∏èCreate Draft Release
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          draft: true
          generate_release_notes: true
          files: |
            ${{ env.WIN_ARTIFACT }}.zip
            ${{ env.LINUX_ARTIFACT }}.zip
            ${{ env.LINUX_AARCH_ARTIFACT }}.zip
            ${{ env.MACOS_ARTIFACT }}.zip
            ${{ env.MACOS_AARCH_ARTIFACT }}.zip
